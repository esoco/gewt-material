buildscript { 
	repositories { jcenter() }
    dependencies { classpath 'de.esoco.gwt:gwt-gradle-plugin:1.+' }
}

apply plugin: 'java'
apply plugin: 'osgi'
apply plugin: 'eclipse'
apply plugin: 'de.esoco.gwt-lib'

project.group   = 'de.esoco'

sourceCompatibility = 1.8

repositories {
	mavenCentral()
	jcenter()
	maven {url "https://oss.sonatype.org/content/repositories/snapshots/"}
}

dependencies 
{
	if (project(':gewt').getProjectDir().exists())
	{
		compile project(':gewt')
	}
	else
	{
		compile 'de.esoco:gewt:1.2.+'
	}

	compile 'com.github.gwtmaterialdesign:gwt-material:2.1.1'
	compile 'com.github.gwtmaterialdesign:gwt-material-addins:2.1.1'
	compile 'com.github.gwtmaterialdesign:gwt-material-table:2.1.1'
}

gwt {
    module 'de.esoco.GewtMaterial'
    gwtVersion = '2.8.2'
    compile {
		sourceLevel = '1.8'
		maxHeapSize = '1024M'
	}
}

// sources are need for the GWT compiler
jar { from sourceSets.main.allSource }

task sourceJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourceJar
    archives javadocJar
}

tasks.withType(Javadoc) {
    // workaround for javadoc errors from references to gwt-user.jar
    options.addStringOption("sourcepath", "")
    failOnError = false
    options.addBooleanOption('quiet', true)
    
    if (JavaVersion.current().isJava8Compatible()) {
        options.addBooleanOption('Xdoclint:none', true) 
    }
}

eclipse {
	classpath {
		// add GWT plugin container and prevent buildship from replacing the
		// eclipse classpath (which would remove GWT)
		containers 'com.gwtplugins.gwt.eclipse.core.GWT_CONTAINER',
		           'org.eclipse.buildship.core.gradleclasspathcontainer'
	}
}

// ----------- Bintray Release -----------

buildscript {
    repositories { jcenter() }
    dependencies { classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7' }
}
apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven'

bintray {
	user = project.hasProperty('bintrayUser') ?
				project.property('bintrayUser') :
				System.getenv('BINTRAY_USER')
	key = project.hasProperty('bintrayApiKey') ?
				project.property('bintrayApiKey') :
				System.getenv('BINTRAY_API_KEY')
    configurations = ['archives']
    publish = true

	pkg {
		repo = 'sdack'
		name = project.name
		version {
			name = project.version
	    }
    }
}
